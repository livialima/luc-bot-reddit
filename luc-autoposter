#/bin/bash env python
#
##	luc-autoposter - Post correct daily lesson to Reddit from GitHub 
##

import praw
import configparser
import os
import numpy as np
import sys
import json
from luc-settings, # import github and reddit creds
	import full_path, client_id, # has to be another module?


def main():
	""" Designed to be run once a day, this will:
		(0) check and exit if that day's already in Reddit
		(c) remove the 'sticky' from the previos day's lesson
		(a) post the day's lesson to r/linuxupskillchallenge
		(b) make it 'sticky'
		(d) delete the oldest lesson (ie the one 5 days old) 
	    with maybees ome special things on Day 1?
	
	"""
 
	#    Calculate today's lesson-day-value (ie weekday of the month)
	#
	todaytime = np.datetime64('today')
	print(todaytime)
	busornot = np.is_busday(todaytime)
	print("Today is a business day: ", busornot)	
	weekday-of-month = weekdayoffmoth

	#    If "Day 1", do some different stiuff
	#
        if not weekday == 1 
	#    Otherwise, do this stuff...
	#

	#    Pull today's lesson from Github
	#
	todays-lesson = grabfromgithub(weekday)

	#    IFF that goes OK, then proceed..
	#
	#    Take "sticky" off any/all "Day x" posts
	#
	unsticky-all-lessons	# ie posts with "Day x"

	#    Post today's lesson, and 'mod/sticky' it
	#
	
	post-and-sticky(todays-lesson)

	#    Calculate which Day x to delete and Delete it 
	#
	delete-fifth-oldest-day(weekday)


# -----------------------------------supporting functions----------------------------------
#
#

def delete-fifth-oldestday(day)

	days = {
		1:17,
		2:18,
		3:19,
		4,20,
		5,20,
		6,1
		7,2
		}

#    Pull settings, including 'secrets', from local dot file
#
config = configparser.ConfigParser()
config_dir = os.path.expanduser('~/.luc-autoposter/')
full_path = config_dir + 'config'

try:
    config.read(full_path)
    key_itself = json.loads(config.get("Global", "User_agent"))
    client_id = {'api_key': key_itself}
except:
    sys.exit(
        "\n[Error]: 'client_id' not found.\n"
        "\n   The script expects the Reddit app's GUID to be stored"
        "\n   in the file: ~/.luc-autoposter/config "
        "\n"
    )

try:
    config.read(full_path)
    key_itself = json.loads(config.get("Global", "client_id"))
    client_id = {'api_key': key_itself}
except:
    sys.exit(
        "\n[Error]: 'client_id' not found.\n"
        "\n   The script expects the Reddit script code key to be stored"
        "\n   in the file: ~/.luc-autoposter/config "
        "\n"
    )

try:
    config.read(full_path)
    EMAIL_FROM = json.loads(config.get("Global", "client_secret"))
except:
    sys.exit(
        "\n[Error]: 'client_secret' not found.\n"
        "\n   The script expects Reddit app's secret to be stored "
        "\n   in the file: ~/.luc-autoposter/config "
        "\n"
    )

try:
    config.read(full_path)
    PHISH_MASTER = json.loads(config.get("Global", "username"))
except:
    sys.exit(
        "\n[Error]: 'username' not found.\n"
        "\n   The script expects the Reddit username to be"
        "\n   in the file: ~/.luc-autoposter/config "
        "\n"
    )

try:
    config.read(full_path)
    URL = json.loads(config.get("Global", "password"))
except:
    sys.exit(
        "\n[Error]: 'password' not found.\n"
        "\n   The script expects the Reddit password to be stored "
        "\n   in the file: ~/.luc-autoposter/config "
        "\n"
    )


#
#
#


if __name__ == '__main__':
    sys.exit(main())
